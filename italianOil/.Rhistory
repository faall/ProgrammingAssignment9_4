source('~/Documents/DataScientist/8machineLearning/quizz/quiz_4_1.R')
str(vowel.train)
fitRF <- train(y ~ ., vowel.train, method = "rf", prox = F)
fitRF
fitRF$finalModel
source('~/Documents/DataScientist/8machineLearning/quizz/quiz_4_1.R')
source('~/Documents/DataScientist/8machineLearning/quizz/quiz_4_1.R')
confusionMatrix(predRF,vowel.train$y)
confusionMatrix(predRF,vowel.test$y)
source('~/Documents/DataScientist/8machineLearning/quizz/quiz_4_1.R')
source('~/Documents/DataScientist/8machineLearning/quizz/quiz_4_1.R')
fitBoost <- train(y ~ ., vowel.train, method = "gbm")
fitBoost <- train(y ~ ., vowel.train, method = "gbm", verbose = F)
fitBoost
fitBoost$finalModel
predBoost <- predict(fitBoost, vowel.test)
confusionMatrix(predBoost,vowel.test$y)
q()
source('~/Documents/DataScientist/8machineLearning/quizz/quiz_4_1.R')
confusionMatrix(predRF,vowel.test$y)
confusionMatrix(predRF,vowel.test$y)$Accuracy
cmRF<-confusionMatrix(predRF,vowel.test$y)
cmRF$overall
cmRF$overall$Accuracy
cmRF$overall[,1]
cmRF$overall[1]
source('~/Documents/DataScientist/8machineLearning/quizz/quiz_4_1.R')
agree <- (predBoost == predRF)
sum(agree)
sum(agree)/nrow(agree)
nrow(agree)
length(agree)
sum(agree)/length(agree)
source('~/Documents/DataScientist/8machineLearning/quizz/quiz_4_1.R')
source('~/Documents/DataScientist/8machineLearning/quizz/quiz_4_2.R')
source('~/Documents/DataScientist/8machineLearning/quizz/quiz_4_2.R')
source('~/Documents/DataScientist/8machineLearning/quizz/quiz_4_2.R')
combDF <- data.frame(testing$diagnosis, predRF, predBoost, predLDA)
fitComb <- train(diagnosis ~ ., combDF, prox = F)
fitComb <- train(diagnosis ~ ., data= combDF, method = "rf", prox = F)
fitComb <- train(diagnosis ~ ., combDF, method = "rf", prox = F)
combDF <- data.frame(diagnosis = testing$diagnosis, predRF, predBoost, predLDA)
fitComb <- train(diagnosis ~ ., combDF, method = "rf", prox = F)
fitComb
source('~/Documents/DataScientist/8machineLearning/quizz/quiz_4_2.R')
source('~/Documents/DataScientist/8machineLearning/quizz/quiz_4_3.R')
source('~/Documents/DataScientist/8machineLearning/quizz/quiz_4_3.R')
q()
source('~/Documents/DataScientist/8machineLearning/quizz/quiz_4_3.R')
source('~/Documents/DataScientist/8machineLearning/quizz/quiz_4_3.R')
source('~/Documents/DataScientist/8machineLearning/quizz/quiz_4_3.R')
source('~/Documents/DataScientist/8machineLearning/quizz/quiz_4_3.R')
fit
fit$finalModel
plot(fit)
plot(fit, xvar=step)
plot(fit, xvar="step")
plot(fit, xvar="penalty")
par(mfrow=c(2,2))
plot(fit, xvar="penalty")
plot(fit, xvar="step")
plot(fit, xvar = c("step","penalty")
plot(fit, xvar = c("step","penalty"))
plot(fit, xvar = c("step","penalty"))
qplot(fit)
plot(fit, xvar="penalty")
fit$finalModel
plot(fit, xvar="penalty", use.color = T)
plot(fit, xvar="penalty", use.color = T)
fit
str(training)
source('~/Documents/DataScientist/8machineLearning/quizz/quiz_4_3.R')
source('~/Documents/DataScientist/8machineLearning/quizz/quiz_4_3.R')
source('~/Documents/DataScientist/8machineLearning/quizz/quiz_4_3.R')
source('~/Documents/DataScientist/8machineLearning/quizz/quiz_4_3.R')
plot(fit, xvar="penalty", use.color = T)
source('~/Documents/DataScientist/8machineLearning/quizz/quiz_4_4.R')
source('~/Documents/DataScientist/8machineLearning/quizz/quiz_4_4.R')
source('~/Documents/DataScientist/8machineLearning/quizz/quiz_4_4.R')
tstrain
head(training)
fit <- bats(tstrain)
fit
forecast(fit)
tail(training)
head(testing)
head(testing, h = 235)
forecast(fit, h= 235)
View(testing)
source('~/Documents/DataScientist/8machineLearning/quizz/quiz_4_4.R')
forecast(fit, h= 235)
pForecast <- forecast(fit, h= 235)
pForecast
str(pForecast)
pForecast$x
pForecast$fitted
pForecast$lower
pForecast$lower[,2]
testing
testing[,3] >= pForecast$lower[,2]
testing[,3] >= pForecast$lower[,2] && testing[,3] >= pForecast$uper[,2]
testing[,3] >= pForecast$lower[,2] && testing[,3] <= pForecast$uper[,2]
testing[,3] >= pForecast$lower[,2] & testing[,3] <= pForecast$uper[,2]
(testing[,3] >= pForecast$lower[,2]) & (testing[,3] <= pForecast$uper[,2])
(testing[,3] <= pForecast$uper[,2])
(testing[,3] <= pForecast$upper[,2])
(testing[,3] >= pForecast$lower[,2]) & (testing[,3] <= pForecast$upper[,2])
isWhitin <- (testing[,3] >= pForecast$lower[,2]) & (testing[,3] <= pForecast$upper[,2])
isWithin <- (testing[,3] >= pForecast$lower[,2]) & (testing[,3] <= pForecast$upper[,2])
sum(isWhitin)
source('~/Documents/DataScientist/8machineLearning/quizz/quiz_4_4.R')
source('~/Documents/DataScientist/8machineLearning/quizz/quiz_4_5.R')
library("e1071", lib.loc="/usr/lib64/R/library")
concrete
set.seed(325)
fit <- svm(CompressiveStrength ~ .)
fit <- svm(CompressiveStrength ~ ., training)
fit
source('~/Documents/DataScientist/8machineLearning/quizz/quiz_4_5.R')
source('~/Documents/DataScientist/8machineLearning/quizz/quiz_4_5.R')
source('~/Documents/DataScientist/8machineLearning/quizz/quiz_4_5.R')
source('~/Documents/DataScientist/8machineLearning/quizz/quiz_4_5.R')
head(testing)
confusionMatrix(pSVM, testing$CompressiveStrength)
head(pSVM)
(pSVM - testing$CompressiveStrength)^2
sum((pSVM - testing$CompressiveStrength)^2)
sum((pSVM - testing$CompressiveStrength)^2)/lengh(pSVM)
sum((pSVM - testing$CompressiveStrength)^2)/lenght(pSVM)
sum((pSVM - testing$CompressiveStrength)^2)/length(pSVM)
length(pSVM)
sqrt(sum((pSVM - testing$CompressiveStrength)^2)/length(pSVM))
source('~/Documents/DataScientist/8machineLearning/quizz/quiz_4_5.R')
source('~/Documents/DataScientist/8machineLearning/quizz/quiz_4_2.R')
print(round(confusionMatrix(predRF,testing$diagnosis)$overall[1]),2)
print(round(confusionMatrix(predRF,testing$diagnosis)$overall[1],2))
source('~/Documents/DataScientist/8machineLearning/quizz/quiz_4_2.R')
source('~/Documents/DataScientist/8machineLearning/quizz/quiz_4_3.R')
plot(fit, xvar="penalty", use.color = T)
source('~/Documents/DataScientist/8machineLearning/quizz/quiz_4_3.R')
plot(fit, xvar="penalty", use.color = T)
fit
predict(fit, type = "coef")
predict(fit, s = 0.9, type = "coef")
predict(fit, s = 0.9, type = "coef", mode = "fraction")
fit$finalModel
fit$finalModel$penalty
str(fit)
class(fit)
pLasso <- predict(fit, testing)
plot(pLasso)
fit$finalModel$penalty
fit$finalModel$call
plot(fit$finalModel, xvar="penalty", use.color = T)
plot(fit$finalModel, xvar="step", use.color = T)
plot(fit$finalModel, xvar="penalty", use.color = T)
q()
library("formatR", lib.loc="/usr/lib64/R/library")
library(shiny)
detach("package:shiny", unload=TRUE)
install.packages("shiny")
q()
install.packages("shiny")
install.packages("shiny")
library(shiny)
runApp('Documents/DataScientist/9product/shiny_1/shiny_1')
runApp('Documents/DataScientist/9product/shiny_1/shiny_1')
runApp('Documents/DataScientist/9product/shiny_1/shiny_1')
runApp('Documents/DataScientist/9product/shiny_1/shiny_1')
runApp('Documents/DataScientist/9product/shiny_1/shiny_1')
runApp('Documents/DataScientist/9product/shiny_1/shiny_1')
runApp('Documents/DataScientist/9product/shiny_1/shiny_1')
install.packages("UsingR")
runApp('Documents/DataScientist/9product/shiny_1/shiny_1')
q()
install.packages("leaflet")
install.packages("png")
install.packages("leaflet")
library(leaflet)
mymap <- leaflet() %<% addTiles()
mymap <- leaflet() %>% addTiles()
mymap
mymap <- mymap %>% addMarkers(lat = 39.2980803, lng = 76.5898801, popup = "Jeff Leek's office")
mymap
mymap <- leaflet() %>% addTiles()
mymap <- mymap %>% addMarkers(lat = 39.2980803, lng = -76.5898801, popup = "Jeff Leek's office")
mymap
q()
install.packages("rJava")
require(devtools)
install.packages("devtools")
require(devtools)
install_github("slidify", "ramnathv")
install.packages("devtools")
install.packages("/home/fabio/Downloads/devtools_1.13.4.tar.gz", repos = NULL)
install.packages("devtools")
install.packages("/home/fabio/Downloads/devtools_1.13.4.tar.gz", repos = NULL)
install.packages("/home/fabio/Downloads/memoise_1.1.0.tar.gz", repos = NULL)
install.packages("/home/fabio/Downloads/whisker_0.3-2.tar.gz", repos = NULL)
install.packages("/home/fabio/Downloads/git2r_0.19.0.tar.gz", repos = NULL)
install.packages("/home/fabio/Downloads/devtools_1.13.4.tar.gz", repos = NULL)
install_github("slidify", "ramnathv")
library(devtools)
install_github("slidify", "ramnathv")
q()
?mpg
library(ggplot2)
?mpg
str(mpg)
ggplot(data = mpg) + geom_point(mapping = aes(x=displ, y=hwy))
ggplot(data = mpg) + geom_point(mapping = aes(x=displ, y=hwy)) + facet_wrap(~class, nrow = 2)
ggplot(data = mpg) + geom_point(mapping = aes(x=displ, y=hwy)) + facet_wrap(~class, nrow = 3)
ggplot(data = mpg) + geom_point(mapping = aes(x=displ, y=hwy)) + facet_grid(drv~cyl)
ggplot(data = mpg) + geom_point(mapping = aes(x=displ, y=hwy)) + facet_grid(.~cyl)
ggplot(data = mpg) + geom_point(mapping = aes(x=displ, y=hwy)) + facet_wrap(~cyl)
ggplot(data = mpg) + geom_point(mapping = aes(x=displ, y=hwy)) + facet_wrap(~cyl, nrow = 1)
ggplot(data = mpg) + geom_point(mapping = aes(x=displ, y=hwy)) + facet_grid(.~cyl)
ggplot(data = mpg) + geom_point(mapping = aes(x=displ, y=hwy)) + facet_wrap(~cyl, nrow = 1)
ggplot(data = mpg) +
geom_point(mapping = aes(x = drv, y = cyl))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ .)
?facet_wrap
?geom_point
?aes
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color=class()))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color=class)
)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, stroke=class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), stroke =F)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), stroke =T)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), stroke =2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), pwt =2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), stroke =1)
?geom_point
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), size = 5,stroke =1)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), size = 5,stroke =.5)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), size = 5,stroke =.5, fill="gray")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), size = 5,stroke =.5, fill="blue")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), size = 5,stroke =.5, fill="blue", shape=21)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), size = 5,stroke =1, fill="blue", shape=21)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), size = 5,stroke =2, fill="blue", shape=21)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), size = 5,stroke =2, fill="blue", shape=21, alpha=.5)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color=displ<5))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth(se = FALSE)
?stat_summary
?geom_pointrange
?geom_count
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point()
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_jitter()
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_count()
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point() +
geom_abline()
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point() +
geom_abline() +
coord_fixed()
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point() +
geom_abline()
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point() +
geom_abline() +
coord_fixed()
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point() +
geom_abline()
?coord_fixed
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point() +
geom_abline() +
coord_fixed()
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point() +
geom_abline()
q()
library(nycflights13)
install.packages("nycflights13")
install.packages("/home/fabio/Downloads/nycflights13_0.2.2.tar.gz", repos = null)
install.packages("/home/fabio/Downloads/nycflights13_0.2.2.tar.gz", repos = "")
install.packages("/home/fabio/Downloads/nycflights13_0.2.2.tar.gz", repos = NULL)
library(nycflights13)
head(flights)
filter(flights, month == 1, day == 1)
library(dplyr)
filter(flights, month == 1, day == 1)
nov_dec <- filter(flights, month %in% c(11, 12))
filter(flights, !(arr_delay > 120 | dep_delay > 120))
filter(flights, (arr_delay > 120 | dep_delay > 120))
?between
filter(flights,between(dep_delay,30,120))
is.na(flights)
sum(is.na(flights))
filter(fli)
filter(flights, is.na(dep_time))
select(flights, contains("TIME"))
?contains
?one_of
?lead
y <- c(1, 2, 2, NA, 3, 4)
min_rank(y)
x <- c(5, 1, 3, 2, 2, NA)
min_rank(x)
y<-1:6
min_rank(y)
y<-6:1
min_rank(y)
y <- c(1, 3, 2, 5, 3, 4)
min_rank(y)
y <- c(1, 3, 2, 5, 3, 4, 3)
min_rank(y)
delays <- not_cancelled %>%
group_by(tailnum) %>%
summarise(
delay = mean(arr_delay)
)
not_cancelled <- flights %>%
filter(!is.na(dep_delay), !is.na(arr_delay))
delays <- not_cancelled %>%
group_by(tailnum) %>%
summarise(
delay = mean(arr_delay)
)
ggplot(data = delays, mapping = aes(x = delay)) +
geom_freqpoly(binwidth = 10)
library(ggplot2)
ggplot(data = delays, mapping = aes(x = delay)) +
geom_freqpoly(binwidth = 10)
## COMANDOS estudiados
## COMANDOS estudiados
## COMANDOS estudiados
ggplot(data = delays, mapping = aes(x = delay)) +
geom_freqpoly(binwidth = 10)
## COMANDOS estudiados
q()
source('~/Documents/DataScientist/9dataProduct/paw4/modeling.R', echo=TRUE)
setwd("~/Documents/DataScientist/9dataProduct/paw4/")
source('~/Documents/DataScientist/9dataProduct/paw4/modeling.R', echo=TRUE)
plot(oliveTrain)
gbm3 <- train(Area ~ ., data = oliveTrain[,-c(3,5,7)], method = "gbm", verbose = F)
pred3 <- predict(gbm3, newdata = oliveVal[,-c(3,5,7)])
confusionMatrix(oliveVal$Area, pred3)$overall
source('~/Documents/DataScientist/9dataProduct/paw4/modeling.R', echo=TRUE)
save(gbm3, "model.rda")
save(gbm3, file = "model.rda")
testCase <- oliveTest[1,-c(3,5,7)]
testCase
save(testCase, file = "test_case.rda")
load("test_case.rda")
load("model.rda")
predict(gbm3, testCase)
source('~/Documents/DataScientist/9dataProduct/paw4/modeling.R', echo=TRUE)
oliveTest
testCase <- oliveTest[100,-c(3,5,7)]
testCase
testCase <- olive[100,-c(3,5,7)]
testCase
testCase <- olive[422,-c(3,5,7)]
testCase
save(testCase, file = "test_case.rda")
load("test_case.rda")
load("model.rda")
predict(gbm3, testCase)
gbm3
predict(gbm3, testCase)
predict(gbm3, testCase)
gbm3$trainingData
testCase <- olive[422,-c(4,6,8)]
load("olive.rda")
testCase <- olive[422,-c(4,6,8)]
predict(gbm3, testCase)
save(testCase, file = "test_case.rda")
load("model.rda")
load("test_case.rda")
predict(gbm3, testCase)
library("shiny")
str(testCase)
names(testCase)
testCase
load("olive.rda")
range(olive$Palmitic)
range(olive$Stearic)
range(olive$Linoleic)
range(olive)
range(olive$Arachidic)
range(olive$Eicosenoic)
runApp()
runApp('italianWine')
runApp('italianWine')
str(testCase)
runApp('italianWine')
runApp('italianWine')
runApp('italianWine')
runApp('italianWine')
runApp('italianWine')
runApp('italianWine')
runApp('italianWine')
library(googleVis)
italy <- data.frame(locationvar = "IT-55", numvar = 0, hovervar = "Umbria")
italy
g<-gvisMap(italy)
plot(g)
g<-gvisGeoMap(italy)
italy <- data.frame(locationvar = "IT-55", numvar = "0", hovervar = "Umbria")
g<-gvisGeoMap(italy)
g<-gvisGeoMap(italy, locationvar = "locationvar")
g<-gvisGeoMap(italy, locationvar = "locationvar", numvar = "numvar")
plot(g)
g<-gvisGeoChart(italy, locationvar = "locationvar", numvar = "numvar")
g<-gvisGeoChart(italy, locationvar = "locationvar")
plot(g)
g<-gvisGeoChart(italy, locationvar = "locationvar", hovervar = "hovervar")
plot(g)
italy <- data.frame(locationvar = "Italy", hovervar = "Umbria")
g<-gvisGeoChart(italy, locationvar = "locationvar", hovervar = "hovervar")
g<-gvisGeoChart(italy, locationvar = "locationvar", hovervar = "hovervar")
plot(g)
g<-gvisGeoChart(italy, locationvar = "locationvar", hovervar = "hovervar",options=list(region="150", displayMode="regions", resolution="provinces")
)
plot(g)
g<-gvisGeoChart(italy, locationvar = "locationvar", hovervar = "hovervar",options=list(region="IT", displayMode="regions", resolution="provinces"))
plot(g)
italy <- data.frame(locationvar = "IT-55", hovervar = "Umbria")
g<-gvisGeoChart(italy, locationvar = "locationvar", hovervar = "hovervar",options=list(region="IT", displayMode="regions", resolution="provinces"))
plot(g)
areaMap<-read.csv("./italianWine/data/italy_regions.csv")
areamp
areaMap
areaMap<-read.csv("./italianWine/data/italy_regions.csv")
areaMap
g<-gvisGeoChart(areaMap, locationvar = "code", hovervar = "english",options=list(region="IT", displayMode="regions", resolution="provinces"))
plot(g)
unique(olive$Area)
unique(as.characyetr(olive$Area))
unique(as.characterr(olive$Area))
unique(as.character(olive$Area))
levels(olive$Area)
level(olive$Area)
setwd("italianWine")
getwd
getwd()
runApp()
areaMap <- read.csv("data/italy_regions.csv")
areas <- c("North Apulia", "Calabria", "South Apulia", "Sicily", "Inland Sardinia",
areas <- c("North Apulia", "Calabria", "South Apulia", "Sicily", "Inland Sardinia",
"Costal Sardinia", "East Liguria", "West Liguria", "Umbria")
areas
strsplit(areas," ")
grep("\\b", areas)
grep("\\\b", areas)
grep("\\s", areas)
strsplit("South Liguria"," ")
strsplit("Liguria"," ")
unlist(strsplit("South Liguria"," "))
lenght(unlist(strsplit("South Liguria"," ")))
y <- unlist(strsplit("South Liguria"," "))
y
nrow(y)
length(y)
runApp()
area <- unlist(strsplit("South Liguria"," "))
area <- "South Liguria"
splitName <- unlist(strsplit(area, " "))
plotName <- if(length(splitName) > 1) splitName[2] else splitName[1]
plotCode <- areaMap[,areaMap$english == plotName]
areaMap
plotCode <- areaMap[,areaMap$english == plotName]
plotCode <- areaMap[,areaMap[,3] == plotName]
cols <- areaMap[,3] == plotName
cols
plotCode <- areaMap[,cols]
plotCode <- areaMap[areaMap[,3] == plotName,]
g<-gvisGeoChart(plotCode,
locationvar = "code",
hovervar = "english",
options=list(region="IT",
displayMode="regions",
resolution="provinces"
)
)
plot(g)
runApp()
runApp()
q()
